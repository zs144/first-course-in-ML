## name: mu_gauss_gauss
## function: Evaluates kernel mean for Gaussian kernel and Gaussian distribution
#
## inputs:
##    x: state
##    sig: length-scale parameter
##    lamb: magnitude parameter
##    pi_mean: mean of the Gaussian distribution
##    pi_sd: standard dev of Gaussian distribution
## output: evaluation of kernel mean
#########
return((lamb^2)*sqrt(2*pi)*sig*dnorm(x,mean=pi_mean,sd=sqrt(pi_sd^2+sig^2)))
}
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=sig,pi_mean=0,pi_sd=1))
w_BMC <- t(z)%*%K_inv
BMC_est <- w_BMC%*%fvals
BMC_est
n = 200
sig = 1
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
ComputeGram <-function(x_mat,kernel,...){
#########
## name: ComputeGram
## function: Compute Gram matrix at some design points
#
## inputs:
##    x_mat: matrix of design points
##    kernel: kernel with which to compute the Gram matrix
##    ...: additional parameters to be passed on to the kernel
## output: Gram matrix
#########
## initialise matrix size
x_mat <- as.matrix(x_mat)
n <- nrow(x_mat)
d <- ncol(x_mat)
out <- matrix(ncol=n,nrow=n)
## evaluate kernel on all combination of points
for(i in 1:n){
for(j in i:n){
out[i,j] <- kernel(x_1=x_mat[i,],x_2=x_mat[j,],...)
out[j,i] <- out[i,j]
}
}
return(out)
}
xvals <- rnorm(n,0,sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
mu_gauss_gauss <- function(x,sig,pi_mean,pi_sd,lamb=1){
#########
## name: mu_gauss_gauss
## function: Evaluates kernel mean for Gaussian kernel and Gaussian distribution
#
## inputs:
##    x: state
##    sig: length-scale parameter
##    lamb: magnitude parameter
##    pi_mean: mean of the Gaussian distribution
##    pi_sd: standard dev of Gaussian distribution
## output: evaluation of kernel mean
#########
return((lamb^2)*sqrt(2*pi)*sig*dnorm(x,mean=pi_mean,sd=sqrt(pi_sd^2+sig^2)))
}
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- t(z)%*%K_inv
BMC_est <- w_BMC%*%fvals
BMC_est
n = 300
sig = 1
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
ComputeGram <-function(x_mat,kernel,...){
#########
## name: ComputeGram
## function: Compute Gram matrix at some design points
#
## inputs:
##    x_mat: matrix of design points
##    kernel: kernel with which to compute the Gram matrix
##    ...: additional parameters to be passed on to the kernel
## output: Gram matrix
#########
## initialise matrix size
x_mat <- as.matrix(x_mat)
n <- nrow(x_mat)
d <- ncol(x_mat)
out <- matrix(ncol=n,nrow=n)
## evaluate kernel on all combination of points
for(i in 1:n){
for(j in i:n){
out[i,j] <- kernel(x_1=x_mat[i,],x_2=x_mat[j,],...)
out[j,i] <- out[i,j]
}
}
return(out)
}
xvals <- rnorm(n,0,sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
mu_gauss_gauss <- function(x,sig,pi_mean,pi_sd,lamb=1){
#########
## name: mu_gauss_gauss
## function: Evaluates kernel mean for Gaussian kernel and Gaussian distribution
#
## inputs:
##    x: state
##    sig: length-scale parameter
##    lamb: magnitude parameter
##    pi_mean: mean of the Gaussian distribution
##    pi_sd: standard dev of Gaussian distribution
## output: evaluation of kernel mean
#########
return((lamb^2)*sqrt(2*pi)*sig*dnorm(x,mean=pi_mean,sd=sqrt(pi_sd^2+sig^2)))
}
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- t(z)%*%K_inv
BMC_est <- w_BMC%*%fvals
BMC_est
n = 300
sig = 1
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
xvals <- rnorm(n,0,sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- t(z)%*%K_inv
BMC_est <- w_BMC%*%fvals
BMC_est
n = 20
sig = 1
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
xvals <- rnorm(n,0,sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- t(z)%*%K_inv
BMC_est <- w_BMC%*%fvals
BMC_est
n = 20
sig = 1
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
xvals <- rnorm(n,0,sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K
diag(n)
n = 20
sig = 1
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
xvals <- rnorm(n,0,sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-14)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- t(z)%*%K_inv
BMC_est <- w_BMC%*%fvals
BMC_est
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
Z
z
w_BMC <- K_inv%*%z
w_BMC
BMC_est <- w_BMC%*%fvals
BMC_est <- t(w_BMC)%*%fvals
BMC_est
n = 20
sig = 1
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
xvals <- rnorm(n,0,sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-14)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
BMC_est
n = 30
sig = 1
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
xvals <- rnorm(n,0,sig)
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-14)*diag(n))
fvals <- as.matrix(sapply(X=xvals,FUN=f))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
BMC_est
n = 100
sig = 1
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
xvals <- rnorm(n,0,sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-14)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
BMC_est
n = 100
sig = 1
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
xvals <- rnorm(n,0,sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
BMC_est
n = 1000
sig = 1
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
xvals <- rnorm(n,0,sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
BMC_est
rnorm
pi
sqrt(2*pi)
sqrt(pi)
BMC_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
f <- function(x){return(1+sin(x))}
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
return(BMC_est)
}
BMC_estimator(10,1)
BMC_estimator(100,1)
BMC_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
return(BMC_est)
}
MC_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
MC_est <- sum(fvals)/n
return(MC_est)
}
BMC_estimator(100,1)
MC_estimator(100,1)
BMC_estimator(100,1)
MC_estimator(200,1)
BMC_estimator(200,1)
MC_estimator(300,1)
BMC_estimator(300,1)
BMC_estimator(400,1)
MC_estimator(400,1)
d01vals <- sapply(X=xvals,FUN=dnorm,0,1)
d01vals
IS_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
d01vals <- sapply(X=xvals,FUN=dnorm,0,1)
d0sigvals <- sapply(X=xvals,FUN=dnorm,0,sig)
IS_est <- sum(((fvals*d01vals)/d0sigvals))/n
return(IS_est)
}
IS_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
d01vals <- sapply(X=xvals,FUN=dnorm,0,1)
d0sigvals <- sapply(X=xvals,FUN=dnorm,0,sig)
IS_est <- sum(((fvals*d01vals)/d0sigvals))/n
return(IS_est)
}
BMC_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=1,pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
return(BMC_est)
}
IS_estimator(400,1)
BMC_estimator(400,1)
IS_estimator(400,2)
IS_estimator(400,2)
IS_estimator(400,2)
IS_estimator(400,4)
IS_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
d01vals <- sapply(X=xvals,FUN=dnorm,0,1)
d0sigvals <- sapply(X=xvals,FUN=dnorm,0,sig)
IS_est <- sum(((fvals*d01vals)/d0sigvals))/n
return(IS_est)
}
BMC_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=(1/sqrt(2)),pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
return(BMC_est)
}
IS_estimator(400,1)
BMC_estimator(400,1)
BMC_estimator(100,1)
IS_estimator(100,1)
n = 1000
sig = 1
IS_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
d01vals <- sapply(X=xvals,FUN=dnorm,0,1)
d0sigvals <- sapply(X=xvals,FUN=dnorm,0,sig)
IS_est <- sum(((fvals*d01vals)/d0sigvals))/n
return(IS_est)
}
BMC_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=(1/sqrt(2)),pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
return(BMC_est)
}
IS_estimator(100,1)
BMC_estimator(100,1)
n = 100
sig = 1
IS_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
fvals <- as.matrix(sapply(X=xvals,FUN=f))
d01vals <- sapply(X=xvals,FUN=dnorm,0,1)
d0sigvals <- sapply(X=xvals,FUN=dnorm,0,sig)
IS_est <- sum(((fvals*d01vals)/d0sigvals))/n
return(IS_est)
}
BMC_estimator <- function(n,sig){
xvals <- rnorm(n,0,sd=sig)
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=(1/sqrt(2)),pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
return(BMC_est)
}
IS_estimator(n,sig)
BMC_estimator(n,sig)
n = 100
sig = 1
xvals <- rnorm(n,0,sd=sig)
IS_estimator <- function(n,xvals,sig){
fvals <- as.matrix(sapply(X=xvals,FUN=f))
d01vals <- sapply(X=xvals,FUN=dnorm,0,1)
d0sigvals <- sapply(X=xvals,FUN=dnorm,0,sig)
IS_est <- sum(((fvals*d01vals)/d0sigvals))/n
return(IS_est)
}
BMC_estimator <- function(n,xvals,sig){
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=(1/sqrt(2)),pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- t(w_BMC)%*%fvals
return(BMC_est)
}
IS_estimator(n,sig)
sig = 1
IS_estimator(n,xvals,sig)
BMC_estimator(n,xvals,sig)
n = 100
sig = 1
xvals <- rnorm(n,0,sd=sig)
IS_estimator <- function(n,xvals,sig){
fvals <- as.matrix(sapply(X=xvals,FUN=f))
d01vals <- sapply(X=xvals,FUN=dnorm,0,1)
d0sigvals <- sapply(X=xvals,FUN=dnorm,0,sig)
IS_est <- sum(((fvals*d01vals)/d0sigvals))/n
return(IS_est)
}
BMC_estimator <- function(n,xvals,sig){
k <- function(x_1,x_2){exp(-(x_1-x_2)^2)}
fvals <- as.matrix(sapply(X=xvals,FUN=f))
K <- ComputeGram(matrix(xvals,ncol=1),kernel=k)
K_inv <- solve(K+10^(-12)*diag(n))
z <- as.matrix(sapply(X=xvals,FUN=mu_gauss_gauss,sig=(1/sqrt(2)),pi_mean=0,pi_sd=1))
w_BMC <- K_inv%*%z
BMC_est <- as.numeric(t(w_BMC)%*%fvals)
return(BMC_est)
}
IS_estimator(n,xvals,sig)
BMC_estimator(n,xvals,sig)
this_toss = readline(prompt='Enter next toss ("H" or "T"):')
## Interactive example
cat('\n Enter H or T to add a toss result and see the effect on the posterior.  Use ctrl-C to exit');
nTosses = 0
post_alpha = alpha
post_beta = beta
while(TRUE){
cat(paste('\nYou have currently entered %g tosses\n',nTosses))
this_toss = readline(prompt='Enter next toss ("H" or "T"):')
plot(r,dbeta(r,post_alpha,post_beta),type="l",ylim=c(0,10),lty=2,
xlab="r",ylab="p(r|...)")
if(this_toss=="H"){
post_alpha = post_alpha + 1
}
if(this_toss=="T"){
post_beta = post_beta + 1;
}
nTosses = nTosses + 1
points(r,dbeta(r,post_alpha,post_beta),type="l")
}
## coin_scenario1.R
# From A First Course in Machine Learning, Chapter 2.
# Francois-Xavier Briol, 04/06/16 [f-x.briol@warwick.ac.uk]
# Coin game, prior scenario 1
rm(list=ls(all=TRUE))
## Load the coin data
setwd("C:/Users/Francois-Xavier/Dropbox/OxWaSP/Thesis projects/A first course in machine learning/R_code/data/coin_data")
big_data = as.vector(unlist(read.csv(file="big_data.csv",header=FALSE)))
toss_data = as.vector(unlist(read.csv(file="toss_data.csv",header=FALSE)))
toss_data2 = as.vector(unlist(read.csv(file="toss_data2.csv",header=FALSE)))
## Plot the prior density
alpha = 1
beta = 1
cat('\nPrior parameters: alpha:',alpha,'beta:',beta)
r = seq(0,1,0.01)
plot(r,dbeta(r,alpha,beta),type="l",xlab="r",ylab="p(r)",ylim=c(0,10))
## Incorporate the data one toss at a time
post_alpha = alpha
post_beta = beta
ch = c('T','H')
toss_string = c()
for(i in 1:length(toss_data)){
##
toss_string = c(toss_string,ch[toss_data[i]+1])
plot(r,dbeta(r,post_alpha,post_beta),type="l",ylim=c(0,10),lty=2,
xlab="r",ylab="p(r|...)",main=paste("Posterior after",i,"tosses"))
post_alpha = post_alpha + toss_data[i]
post_beta = post_beta + 1 - toss_data[i]
points(r,dbeta(r,post_alpha,post_beta),type="l");
}
## Incorporate another ten
plot(r,dbeta(r,post_alpha,post_beta),type="l",ylim=c(0,10),lty=2,
xlab="r",ylab="p(r|...)",main="Posterior after 20 tosses")
N = length(toss_data2)
post_alpha = post_alpha + sum(toss_data2)
post_beta = post_beta + N - sum(toss_data2)
points(r,dbeta(r,post_alpha,post_beta),type="l",ylim=c(0,10),
xlab="r",ylab="p(r|...)")
## Incorpoate another 1000
plot(r,dbeta(r,post_alpha,post_beta),type="l",ylim=c(0,10),lty=2,
xlab="r",ylab="p(r|...)",main="Posterior after 1020 tosses")
N = length(big_data)
post_alpha = post_alpha + sum(big_data)
post_beta = post_beta + N - sum(big_data)
points(r,dbeta(r,post_alpha,post_beta),type="l",ylim=c(0,10),
xlab="r",ylab="p(r|...)")
cat('\n Enter H or T to add a toss result and see the effect on the posterior.  Use ctrl-C to exit');
nTosses = 0
post_alpha = alpha
post_beta = beta
while(TRUE){
cat(paste('\nYou have currently entered %g tosses\n',nTosses))
this_toss = readline(prompt='Enter next toss ("H" or "T"):')
plot(r,dbeta(r,post_alpha,post_beta),type="l",ylim=c(0,10),lty=2,
xlab="r",ylab="p(r|...)")
if(this_toss=="H"){
post_alpha = post_alpha + 1
}
if(this_toss=="T"){
post_beta = post_beta + 1;
}
nTosses = nTosses + 1
points(r,dbeta(r,post_alpha,post_beta),type="l")
}
